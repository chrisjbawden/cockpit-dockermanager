name: Generate APT Packages Metadata

on:
  workflow_dispatch:  # Manual trigger from the Actions tab

permissions:
  contents: write

jobs:
  build-packages-metadata:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git safe directory
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y dpkg-dev apt-utils

      - name: Prepare structure
        shell: bash
        run: |
          set -euo pipefail
          cd docs
          mkdir -p \
            dists/stable/main/binary-amd64 \
            dists/stable/main/binary-all \
            dists/stable
          : > .nojekyll

      - name: Debug - list .debs and git status
        shell: bash
        run: |
          set -e
          cd docs
          echo "== .deb files under docs/dists/stable/main/binary-all =="
          find dists/stable/main/binary-all -maxdepth 1 -type f -name '*.deb' -printf '%f\n' | sort || true
          echo "== git status before build =="
          git status --porcelain

      - name: Generate Packages indexes (from binary-all)
        shell: bash
        env:
          GZIP: -n
        run: |
          set -euo pipefail
          cd docs

          DEB_DIR="dists/stable/main/binary-all"

          # Fail loudly if no .debs are present
          if ! find "$DEB_DIR" -maxdepth 1 -type f -name '*.deb' | grep -q .; then
            echo "::error ::No .deb files found under docs/$DEB_DIR. Add packages then re-run."
            exit 1
          fi

          TMP_DIR="tmp-aptbuild"
          rm -rf "$TMP_DIR"; mkdir -p "$TMP_DIR"

          # Build package list once (relative to docs/)
          dpkg-scanpackages --multiversion "$DEB_DIR" /dev/null > "$TMP_DIR/Packages.all"

          # binary-all: only Architecture: all
          awk -v RS='' -v ORS="\n\n" '/\nArchitecture: all\n/ { print }' \
            "$TMP_DIR/Packages.all" > dists/stable/main/binary-all/Packages

          # binary-amd64: include Architecture: all (so amd64 clients see them)
          awk -v RS='' -v ORS="\n\n" '/\nArchitecture: all\n/ { print }' \
            "$TMP_DIR/Packages.all" > dists/stable/main/binary-amd64/Packages

          # Compress deterministically
          gzip -n -9 -f dists/stable/main/binary-all/Packages
          gzip -n -9 -f dists/stable/main/binary-amd64/Packages

      - name: Generate Release file (unsigned, with hashes)
        shell: bash
        run: |
          set -euo pipefail
          cd docs

          cat > apt-ftparchive.conf <<'EOF'
          APT::FTPArchive::Release {
            Origin "cockpit-dockermanager";
            Label "cockpit-dockermanager";
            Suite "stable";
            Codename "stable";
            Architectures "amd64 all";
            Components "main";
            Description "Minimal repo (binary-all hosted packages)";
          };
          EOF

          apt-ftparchive -c apt-ftparchive.conf release dists/stable > dists/stable/Release
          rm -f apt-ftparchive.conf

      - name: Commit and push changes
        env:
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          # Force-add in case of repo-level ignores
          git add -f docs/dists/stable docs/.nojekyll
          git commit -m "Regenerate APT Packages (from binary-all) and Release [skip ci]" || echo "No changes to commit"
          git push origin "HEAD:${BRANCH_NAME}"
